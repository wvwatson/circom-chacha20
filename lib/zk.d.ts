import { PrivateInput, Proof, PublicInput, ZKOperator } from "./types";
export declare const ZK_CIRCUIT_CHUNK_SIZE = 16;
export declare const KEY_SIZE_BYTES = 32;
export declare const IV_SIZE_BYTES = 12;
/**
 * Generate ZK proof for CHACHA20-CTR encryption.
 * Circuit proves that the ciphertext is a
 * valid encryption of the given plaintext.
 * The plaintext can be partially redacted.
 *
 * @param privateInput private input to the circuit
 * will include the key, iv, and counter
 * @param pub public input to the circuit,
 * will include the ciphertext and redacted plaintext
 * @param zkParams ZK params -- verification key and circuit wasm
 */
export declare function generateProof({ key, iv, startCounter, }: PrivateInput, { ciphertext }: PublicInput, operator: ZKOperator): Promise<Proof>;
/**
 * Verify a ZK proof for CHACHA20-CTR encryption.
 *
 * @param proofs JSON proof generated by "generateProof"
 * @param publicInput
 * @param zkey
 */
export declare function verifyProof({ proofJson, plaintext }: Proof, { ciphertext }: PublicInput, operator: ZKOperator): Promise<void>;
